{"version":3,"file":"htaccess-tester.js","mappings":"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","sources":["webpack://@warren-bank/htaccess-tester/./node_modules/@warren-bank/url/es6-node/jsURL.js","webpack://@warren-bank/htaccess-tester/../lib/htaccess-parser/model/HtaccessFile.js","webpack://@warren-bank/htaccess-tester/../lib/htaccess-parser/model/RewriteCond.js","webpack://@warren-bank/htaccess-tester/../lib/htaccess-parser/model/RewriteRule.js","webpack://@warren-bank/htaccess-tester/../lib/htaccess-parser/parser.js","webpack://@warren-bank/htaccess-tester/../lib/htaccess-tester/model/RewriteCond.js","webpack://@warren-bank/htaccess-tester/../lib/htaccess-tester/model/RewriteRule.js","webpack://@warren-bank/htaccess-tester/../lib/htaccess-tester/tester.js","webpack://@warren-bank/htaccess-tester/../lib/htaccess-tester/util/file-helper.js","webpack://@warren-bank/htaccess-tester/../lib/htaccess-tester/util/flag-validator.js","webpack://@warren-bank/htaccess-tester/../lib/htaccess-tester/util/url-helper.js","webpack://@warren-bank/htaccess-tester/../lib/htaccess-tester/util/variable-interpolator.js","webpack://@warren-bank/htaccess-tester/../lib/index.js","webpack://@warren-bank/htaccess-tester/webpack/bootstrap","webpack://@warren-bank/htaccess-tester/webpack/runtime/node module decorator","webpack://@warren-bank/htaccess-tester/./src/globals.js"],"sourcesContent":["const regexs = {\r\n  url:  new RegExp('^([^/:]+:)?(?://(?:([^/:@]+):?([^/:@]+)?@)?([^:/\\\\?#]+)(?::(\\\\d+))?)?(/[^\\\\?#]*|[^\\\\?#]+)?(\\\\?[^#]*)?(#.*)?$'),\r\n  host: /^([^:]+)(?::(\\d+))?$/\r\n}\r\n\r\nclass URL {\r\n  #_searchParams = ''\r\n\r\n  constructor(url, base) {\r\n    if (base)\r\n      url = URL.resolve(url, base) || ''\r\n\r\n    this.href = url\r\n  }\r\n\r\n  static resolve(url, base) {\r\n    const srcURL = new URL(base)\r\n    const dstURL = new URL(url)\r\n\r\n    const fields = ['protocol', 'username', 'password', 'hostname', 'port', 'pathname', 'search', 'hash']\r\n\r\n    // copy missing fields in order, and stop when the 1st populated field is encountered.\r\n    // when the 1st populated field is pathname, do the equivalent to: path.join(base_pathname, url_pathname)\r\n    for (let i=0; i < fields.length; i++) {\r\n      let field = fields[i]\r\n\r\n      if ((field === 'pathname') && dstURL[field] && srcURL[field] && (dstURL[field][0] !== '/'))\r\n        dstURL[field] = srcURL[field].replace(/[^\\/]*$/, '') + dstURL[field]\r\n      if (dstURL[field])\r\n        break\r\n      if (srcURL[field])\r\n        dstURL[field] = srcURL[field]\r\n    }\r\n\r\n    return dstURL.toString()\r\n  }\r\n\r\n  toString() {\r\n    return `${this.protocol}${this.host ? `//${this.username ? (this.password ? `${this.username}:${this.password}@` : `${this.username}@`) : ''}${this.host}` : ''}${this.pathname}${this.search}${this.hash}`\r\n  }\r\n\r\n  toJSON() {\r\n    return this.toString()\r\n  }\r\n\r\n  get href() {\r\n    return this.toString()\r\n  }\r\n\r\n  set href(url) {\r\n    const matches = regexs.url.exec(url)\r\n    if (!matches) throw new Error(\"Failed to construct 'URL': Invalid URL\")\r\n\r\n    this.protocol     = matches[1] || ''\r\n    this.username     = matches[2] || ''\r\n    this.password     = matches[3] || ''\r\n    this.hostname     = matches[4] || ''\r\n    this.port         = matches[5] || ''\r\n    this.pathname     = matches[6] || ''\r\n    this.search       = matches[7] || ''\r\n    this.hash         = matches[8] || ''\r\n  }\r\n\r\n  get host() {\r\n    return this.port ? `${this.hostname}:${this.port}` : this.hostname\r\n  }\r\n\r\n  set host(host) {\r\n    const matches = regexs.host.exec(host)\r\n    if (!matches) throw new Error(\"Failed to update 'URL': Invalid host\")\r\n\r\n    this.hostname     = matches[1] || ''\r\n    this.port         = matches[2] || ''\r\n  }\r\n\r\n  // read-only\r\n  get origin() {\r\n    return `${this.protocol}//${this.host}`\r\n  }\r\n\r\n  get search() {\r\n    return this.#_searchParams.toString()\r\n  }\r\n\r\n  set search(search) {\r\n    this.#_searchParams = new URLSearchParams(search)\r\n  }\r\n\r\n  // read-only\r\n  get searchParams() {\r\n    return this.#_searchParams\r\n  }\r\n\r\n  // ===================\r\n  // additional methods:\r\n  // ===================\r\n\r\n  parse(parseQueryString = false) {\r\n    return {\r\n      slashes:  true,\r\n      href:     this.href,\r\n      protocol: this.protocol,\r\n      username: this.username,\r\n      password: this.password,\r\n      auth:     `${this.username ? (this.password ? `${this.username}:${this.password}` : `${this.username}`) : ''}`,\r\n      hostname: this.hostname,\r\n      port:     this.port,\r\n      host:     this.host,\r\n      pathname: this.pathname,\r\n      search:   this.search,\r\n      path:     `${this.pathname}${this.search}`,\r\n      query:    (parseQueryString ? this.searchParams.parse() : this.searchParams.toString(/* exclude_question_mark= */ true)),\r\n      hash:     this.hash\r\n    }\r\n  }\r\n}\r\n\r\nclass URLSearchParams {\r\n  #_map    = {}\r\n  #_sorted = false\r\n\r\n  constructor(search) {\r\n    this.#_map = {}\r\n\r\n    if (search && (search[0] === '?'))\r\n      search = search.substring(1)\r\n\r\n    if (search) {\r\n      const pairs = search.split('&')\r\n      pairs.forEach(pair => {\r\n        const index = pair.indexOf('=')\r\n\r\n        if (index > 0) {\r\n          const key = pair.substring(0, index)\r\n          const val = (index + 1 < pair.length) ? pair.substring(index + 1) : ''\r\n\r\n          if (!this.#_map[key])\r\n            this.#_map[key] = []\r\n\r\n          this.#_map[key].push(val)\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  has(key) {\r\n    return !!this.#_map[key]\r\n  }\r\n\r\n  get(key) {\r\n    return this.#_map[key] ? this.#_map[key][0] : null\r\n  }\r\n\r\n  getAll(key) {\r\n    return this.#_map[key] ? [...this.#_map[key]] : []\r\n  }\r\n\r\n  set(key, val) {\r\n    this.#_map[key] = [val]\r\n  }\r\n\r\n  append(key, val) {\r\n    if (!this.#_map[key])\r\n      this.#_map[key] = []\r\n\r\n    this.#_map[key].push(val)\r\n  }\r\n\r\n  delete(key, val) {\r\n    if (!this.#_map[key]) return\r\n\r\n    if (val) {\r\n      const index = this.#_map[key].indexOf(val)\r\n      if (index >= 0) {\r\n        this.#_map[key].splice(index, 1)\r\n\r\n        if (!this.#_map[key].length)\r\n          delete this.#_map[key]\r\n      }\r\n    }\r\n    else {\r\n      delete this.#_map[key]\r\n    }\r\n  }\r\n\r\n  sort(sorted = true) {\r\n    this.#_sorted = !!sorted\r\n  }\r\n\r\n  keys() {\r\n    const keys = Object.keys(this.#_map)\r\n    if (this.#_sorted) keys.sort()\r\n    return keys\r\n  }\r\n\r\n  values() {\r\n    const values = []\r\n    for (const key in this.#_map) {\r\n      values.push(...this.#_map[key])\r\n    }\r\n    if (this.#_sorted) values.sort()\r\n    return values\r\n  }\r\n\r\n  entries() {\r\n    const denormalized = []\r\n    const keys = this.keys()\r\n    keys.forEach(key => {\r\n      const vals = this.#_sorted\r\n        ? [...this.#_map[key]].sort()\r\n        : this.#_map[key]\r\n      vals.forEach(val => {\r\n        denormalized.push([key, val])\r\n      })\r\n    })\r\n    return denormalized\r\n  }\r\n\r\n  forEach(callback, thisArg) {\r\n    const denormalized = this.entries()\r\n    denormalized.forEach(([key, val]) => {\r\n      callback.apply(thisArg, [val, key, this])\r\n    })\r\n  }\r\n\r\n  toString(exclude_question_mark = false) {\r\n    let search = ''\r\n    const denormalized = this.entries()\r\n    denormalized.forEach(([key, val]) => {\r\n      let prefix = search ? '&' : exclude_question_mark ? '' : '?'\r\n      search += `${prefix}${key}=${val}`\r\n    })\r\n    return search\r\n  }\r\n\r\n  toJSON() {\r\n    return this.toString()\r\n  }\r\n\r\n  // ===================\r\n  // additional methods:\r\n  // ===================\r\n\r\n  parse() {\r\n    const map_clone = {}\r\n    for (const key in this.#_map) {\r\n      map_clone[key] = [...this.#_map[key]]\r\n    }\r\n    return map_clone\r\n  }\r\n}\r\n\r\nconst parse = (url, parseQueryString = false) => {\r\n  return (new URL(url)).parse(parseQueryString)\r\n}\r\n\r\nconst resolve = (base, url) => URL.resolve(url, base)\r\n\r\ntry {\r\n  if (module instanceof Object)\r\n    module.exports = {URL, URLSearchParams, parse, resolve}\r\n}\r\ncatch(e) {}\r\n\r\ntry {\r\n  if (window instanceof Object)\r\n    window.jsURL = {URL, URLSearchParams, parse, resolve}\r\n}\r\ncatch(e) {}\r\n","function HtaccessFile() {\n  this.RewriteRules = []\n}\n\nmodule.exports = HtaccessFile\n","function RewriteCond(text, testString, condPattern, flags) {\n  this.text        = text\n  this.testString  = testString\n  this.condPattern = condPattern\n  this.flags       = flags.replace('[', '').replace(']', '').split(',')\n    .map(Function.prototype.call, String.prototype.trim)\n    .filter(function (flag) {\n      return (flag.length > 0)\n    })\n}\n\nmodule.exports = RewriteCond\n","function RewriteRule(text, pattern, substitution, flags, conditions) {\n  this.text         = text\n  this.pattern      = pattern\n  this.substitution = substitution\n  this.flags        = flags.replace('[', '').replace(']', '').split(',')\n    .map(Function.prototype.call, String.prototype.trim)\n    .filter(function (flag) {\n      return (flag.length > 0)\n    })\n  this.conditions   = conditions || []\n}\n\nmodule.exports = RewriteRule\n","const HtaccessFile = require('./model/HtaccessFile')\nconst RewriteRule = require('./model/RewriteRule')\nconst RewriteCond = require('./model/RewriteCond')\n\nfunction Parser(content) {\n  if (!Array.isArray(content)) {\n    content = content.toString().split('\\n')\n  }\n\n  this.content = content.filter(function (line) {\n    const trimmed = line.trim()\n    return (trimmed.length > 0) && (trimmed.substring(0, 1) !== '#')\n  })\n\n  return this.parseContent()\n}\n\nParser.prototype.parseContent = function () {\n  const htaccessFile = new HtaccessFile()\n\n  let RewriteEngineActivated = false\n  let conditions = []\n  let flags = null\n\n  for (let i=0; i < this.content.length; i++) {\n    const line = this.content[i].trim()\n    const parts = line.trim().split(' ').filter(function (part) {\n      return part.length > 0\n    })\n\n    const directive = parts[0]\n\n    switch(directive) {\n      case 'RewriteEngine':\n        RewriteEngineActivated = (parts[1].toLowerCase() === 'on')\n        break\n\n      case 'RewriteBase':\n        if (RewriteEngineActivated) {\n          htaccessFile.RewriteBase = parts[1]\n        }\n        break\n\n      case 'RewriteCond':\n        if (RewriteEngineActivated) {\n          flags = (typeof parts[3] === 'undefined' ? '' : parts[3])\n          conditions.push(new RewriteCond(line, this.stripQuotes(parts[1]), this.stripQuotes(parts[2]), flags))\n        }\n        break\n\n      case 'RewriteRule':\n        if (RewriteEngineActivated) {\n          flags = (typeof parts[3] === 'undefined' ? '' : parts[3])\n          const rule = new RewriteRule(line, this.stripQuotes(parts[1]), this.stripQuotes(parts[2]), flags, conditions)\n\n          htaccessFile.RewriteRules.push(rule)\n          conditions = []\n        }\n        break\n    }\n  }\n\n  return htaccessFile\n}\n\nParser.prototype.stripQuotes = function (s) {\n  return (/^\"([^\"]*)\"$/.test(s) || /^'([^']*)'$/.test(s))\n    ? s.slice(1, -1)\n    : s\n}\n\nmodule.exports = function (content) {\n  return (new Parser(content))\n}\n","// references:\n//   https://httpd.apache.org/docs/2.4/mod/mod_rewrite.html#rewritecond\n\nconst vi = require('../util/variable-interpolator')\nconst fv = require('../util/flag-validator')\n\nconst regexs = {\n  \"lexicographical-operation\": /^(<|>|=|<=|>=)(.*)$/,\n  \"integer-operation\":         /^(-eq|-ge|-gt|-le|-lt|-ne)(.*)$/\n}\n\nconst supportedFlags = [\n  'NC', 'nocase',\n  'OR', 'ornext'\n]\n\nfunction RewriteCond(baseCondition) {\n  Object.assign(this, baseCondition)\n\n  this.condPatternFlags = {\n    \"negate\": false,\n    \"lexicographical-operation\": null,\n    \"integer-operation\": null\n  }\n\n  if (this.condPattern && (this.condPattern[0] === '!')) {\n    this.condPatternFlags['negate'] = true\n    this.condPattern = this.condPattern.substring(1)\n  }\n\n  if (this.condPattern) {\n    const matches = regexs[\"lexicographical-operation\"].exec(this.condPattern)\n\n    if (matches) {\n      this.condPatternFlags['lexicographical-operation'] = matches[1]\n      this.condPattern = matches[2]\n    }\n  }\n\n  if (this.condPattern && !this.condPatternFlags['lexicographical-operation']) {\n    const matches = regexs[\"integer-operation\"].exec(this.condPattern)\n\n    if (matches) {\n      this.condPatternFlags['integer-operation'] = matches[1]\n      this.condPattern = matches[2]\n    }\n  }\n\n  if (this.condPattern && !this.condPatternFlags['lexicographical-operation'] && !this.condPatternFlags['integer-operation']) {\n    this.re = this.isNC()\n      ? new RegExp(this.condPattern, 'i')\n      : new RegExp(this.condPattern)\n  }\n}\n\nRewriteCond.prototype.runTest = function (url, variables, currentRuleMatches, previousCondMatches) {\n  const log = {\n    \"text\":         this.text,\n    \"is_condition\": true\n  }\n\n  log.errors = this.isValid()\n\n  if (log.errors && log.errors.length) {\n    log.is_valid = false\n    log.is_match = false\n    return log\n  }\n\n  const resolvedTestString = vi.resolveVariables(\n    this.testString,\n    function(variable) {\n      log.errors.push('RewriteCond TestString variable not resolved: ' + variable)\n    },\n    url, variables, currentRuleMatches, previousCondMatches\n  )\n\n  if (log.errors && log.errors.length) {\n    log.is_valid = false\n    log.is_match = false\n    return log\n  }\n\n  log.is_valid = true\n  log.result = {\n    \"TestString\":       resolvedTestString,\n    \"CondPatternFlags\": Object.assign({}, this.condPatternFlags)\n  }\n\n  if (this.condPatternFlags['lexicographical-operation']) {\n    const testVal = resolvedTestString\n    const condVal = this.condPattern\n\n    switch(this.condPatternFlags['lexicographical-operation']) {\n      case '<':\n        log.is_match = (testVal < condVal)\n        break\n      case '>':\n        log.is_match = (testVal > condVal)\n        break\n      case '=':\n        log.is_match = (testVal == condVal)\n        break\n      case '<=':\n        log.is_match = (testVal <= condVal)\n        break\n      case '>=':\n        log.is_match = (testVal >= condVal)\n        break\n      default:\n        log.is_match = false\n    }\n  }\n\n  else if (this.condPatternFlags['integer-operation']) {\n    const testVal = parseInt(resolvedTestString, 10)\n    const condVal = parseInt(this.condPattern,   10)\n\n    switch(this.condPatternFlags['lexicographical-operation']) {\n      case '-eq':\n        log.is_match = (testVal == condVal)\n        break\n      case '-ge':\n        log.is_match = (testVal >= condVal)\n        break\n      case '-gt':\n        log.is_match = (testVal > condVal)\n        break\n      case '-le':\n        log.is_match = (testVal <= condVal)\n        break\n      case '-lt':\n        log.is_match = (testVal < condVal)\n        break\n      case '-ne':\n        log.is_match = (testVal != condVal)\n        break\n      default:\n        log.is_match = false\n    }\n  }\n\n  else {\n    matches = this.re.exec(resolvedTestString)\n\n    log.is_match = !!matches\n\n    if (matches)\n      log.result.matches = matches.slice()\n  }\n\n  if (this.condPatternFlags['negate'])\n    log.is_match = !log.is_match\n\n  return log\n}\n\nRewriteCond.prototype.isValid = function () {\n  const errors = []\n\n  this.isValidTestString(errors)\n  this.isValidFlags(errors)\n\n  return errors\n}\n\nRewriteCond.prototype.isValidTestString = function (errors) {\n  // special case\n  if (this.testString === 'expr') {\n    errors.push('RewriteCond TestString not supported: ' + this.testString)\n    return\n  }\n\n  vi.isValid(\n    this.testString,\n    function(variable) {\n      errors.push('RewriteCond TestString variable not supported: ' + variable)\n    }\n  )\n}\n\nRewriteCond.prototype.isValidFlags = function (errors) {\n  fv.isValid(\n    this.flags,\n    supportedFlags,\n    function(flag) {\n      errors.push('RewriteCond flag not supported: ' + flag)\n    }\n  )\n}\n\nRewriteCond.prototype.isNC = function () {\n  return fv.hasFlag(this.flags, 'NC')\n    ||   fv.hasFlag(this.flags, 'nocase')\n}\n\nRewriteCond.prototype.isOR = function () {\n  return fv.hasFlag(this.flags, 'OR')\n    ||   fv.hasFlag(this.flags, 'ornext')\n}\n\nmodule.exports = RewriteCond\n","// references:\n//   https://httpd.apache.org/docs/2.4/mod/mod_rewrite.html#rewriterule\n\nconst RewriteCond = require('./RewriteCond')\nconst vi          = require('../util/variable-interpolator')\nconst fv          = require('../util/flag-validator')\nconst fh          = require('../util/file-helper')\nconst uh          = require('../util/url-helper')\n\nconst supportedFlags = [\n  'B', /^B=(.+)$/,\n  'BCTLS',\n  /^BNE=(.+)$/,\n  'BNP', 'backrefnoplus',\n  'END',\n  'F', 'forbidden',\n  'G', 'gone',\n  'L', 'last',\n  'N', /^N=(\\d+)$/, 'next', /^next=(\\d+)$/,\n  'NC', 'nocase',\n  'PT', 'passthrough',\n  'QSA', 'qsappend',\n  'QSD', 'qsdiscard',\n  'QSL', 'qslast',\n  'R', /^R=(\\d{3})$/, 'redirect', /^redirect=(\\d{3})$/,\n  'S', /^S=(\\d+)$/, 'skip', /^skip=(\\d+)$/,\n  /^T=(.+)$/, /^type=(.+)$/\n]\n\nfunction RewriteRule(baseRule) {\n  Object.assign(this, baseRule)\n\n  for (let i=0; i < this.conditions.length; i++) {\n    this.conditions[i] = new RewriteCond(this.conditions[i])\n  }\n\n  this.re = this.isNC()\n    ? new RegExp(this.pattern, 'i')\n    : new RegExp(this.pattern)\n}\n\nRewriteRule.prototype.runAllTests = function (url, variables) {\n  const currentRuleMatches = this.re.exec(uh.get_parsed_pathname(true, true))\n  let previousCondMatches  = null\n  const logs = []\n\n  for (let i=0; i < this.conditions.length; i++) {\n    const log = this.conditions[i].runTest(url, variables, currentRuleMatches, previousCondMatches)\n\n    previousCondMatches = (log.result && log.result.matches)\n      ? log.result.matches\n      : null\n\n    logs.push(log)\n  }\n\n  logs.push(\n    this.runTest(url, variables, currentRuleMatches, previousCondMatches, this.doAllConditionsMatch(logs))\n  )\n\n  return logs\n}\n\nRewriteRule.prototype.runTest = function (url, variables, currentRuleMatches, previousCondMatches, allConditionsMatch) {\n  const log = {\n    \"text\":         this.text,\n    \"is_condition\": false\n  }\n\n  log.errors = this.isValid()\n\n  if (log.errors && log.errors.length) {\n    log.is_valid = false\n    log.is_match = false\n    return log\n  }\n\n  const resolvedSubstitutionString = vi.resolveVariables(\n    this.substitution,\n    function(variable) {\n      log.errors.push('RewriteRule Substitution variable not resolved: ' + variable)\n    },\n    url, variables, currentRuleMatches, previousCondMatches,\n    this.get_backref_format_flags()\n  )\n\n  const new_url = uh.update_querystring(\n    url, resolvedSubstitutionString,\n    this.isQSL(), this.isQSD(), this.isQSA()\n  )\n\n  if (log.errors && log.errors.length) {\n    log.is_valid = false\n    log.is_match = false\n    return log\n  }\n\n  log.is_valid = true\n  log.is_match = !!currentRuleMatches\n  log.all_conditions_match = allConditionsMatch\n  log.result = {\n    \"url\":         new_url,\n    \"status_code\": (this.getStatusCode() || this.getRedirectStatusCode() || null),\n    \"mime_type\":   this.getMimeType(),\n    \"skip_count\":  this.getSkipCount()\n  }\n\n  if (currentRuleMatches)\n    log.result.matches = currentRuleMatches.slice()\n\n  log.is_redirect = (\n       log.result.status_code\n   && (log.result.status_code >= 300)\n   && (log.result.status_code <  400)\n  )\n\n  if (!log.is_redirect && uh.is_redirect_url(new_url)) {\n    log.is_redirect        = true\n    log.result.status_code = 302\n  }\n\n  log.is_passthrough = this.isPassThrough()\n  log.is_last        = this.isLast()\n\n  let nextCount = this.getNextCount()\n  while ((nextCount > 0) && this.runNext(log, variables, previousCondMatches)) {\n    nextCount--\n  }\n\n  return log\n}\n\nRewriteRule.prototype.runNext = function (log, variables, previousCondMatches) {\n  const currentRuleMatches = this.re.exec(uh.trim_lead_slash(log.result.url))\n  if (!currentRuleMatches) return false\n\n  const url = uh.get_resolved_url(log.result.url)\n  let OK = true\n\n  const resolvedSubstitutionString = vi.resolveVariables(\n    this.substitution,\n    function(variable) {\n      OK = false\n    },\n    url, variables, currentRuleMatches, previousCondMatches,\n    this.get_backref_format_flags()\n  )\n\n  const new_url = uh.update_querystring(\n    url, resolvedSubstitutionString,\n    this.isQSL(), this.isQSD(), this.isQSA()\n  )\n\n  if (OK) {\n    if (!log.result['next'])\n      log.result['next'] = {\"count\": 0, \"iterations\": []}\n\n    log.result['next'].count++\n    log.result['next'].iterations.push({\n      \"url\":       url,\n      \"file_path\": fh.get_resolved_filepath(log.result.url),\n      \"matches\":   log.result.matches\n    })\n\n    log.result.url     = new_url\n    log.result.matches = currentRuleMatches.slice()\n  }\n\n  return OK\n}\n\nRewriteRule.prototype.isValid = function () {\n  const errors = []\n\n  this.isValidSubstitutionString(errors)\n  this.isValidFlags(errors)\n\n  return errors\n}\n\nRewriteRule.prototype.isValidSubstitutionString = function (errors) {\n  vi.isValid(\n    this.substitution,\n    function(variable) {\n      errors.push('RewriteRule Substitution variable not supported: ' + variable)\n    }\n  )\n}\n\nRewriteRule.prototype.isValidFlags = function (errors) {\n  fv.isValid(\n    this.flags,\n    supportedFlags,\n    function(flag) {\n      errors.push('RewriteRule flag not supported: ' + flag)\n    }\n  )\n}\n\nRewriteRule.prototype.doAllConditionsMatch = function (logs) {\n  const state = {\n    currentIsOr:    false,\n    prevWasOr:      false,\n    orConditionMet: false\n  }\n\n  for (let i=0; i < this.conditions.length; i++) {\n    state.currentIsOr = this.conditions[i].isOR()\n\n    // one of the OR condition has been met\n    if (state.prevWasOr && state.orConditionMet) {\n      state.prevWasOr      = state.currentIsOr\n      state.orConditionMet = state.currentIsOr\n      continue\n    }\n\n    // condition isn't met\n    if (!logs[i].is_match) {\n      if (state.currentIsOr) {\n        continue\n      }\n      else {\n        return false\n      }\n    }\n    else if (state.currentIsOr) {\n      state.orConditionMet = true\n      state.prevWasOr      = state.currentIsOr\n    }\n  }\n\n  return true\n}\n\nRewriteRule.prototype.getStatusCode = function () {\n  if (\n         (this.flags.indexOf('F')         !== -1)\n    ||   (this.flags.indexOf('forbidden') !== -1)\n  )\n    return 403\n\n  if (\n         (this.flags.indexOf('G')    !== -1)\n    ||   (this.flags.indexOf('gone') !== -1)\n  )\n    return 410\n\n  return 0\n}\n\nRewriteRule.prototype.getRedirectStatusCode = function () {\n  return fv.getFlagIntegerValue(this.flags, 'R',        302)\n    ||   fv.getFlagIntegerValue(this.flags, 'redirect', 302)\n}\n\nRewriteRule.prototype.getSkipCount = function () {\n  return fv.getFlagIntegerValue(this.flags, 'S',    0)\n    ||   fv.getFlagIntegerValue(this.flags, 'skip', 0)\n}\n\nRewriteRule.prototype.getNextCount = function () {\n  return fv.getFlagIntegerValue(this.flags, 'N',    10000)\n    ||   fv.getFlagIntegerValue(this.flags, 'next', 10000)\n}\n\nRewriteRule.prototype.getMimeType = function () {\n  return fv.getFlagStringValue(this.flags, 'T')\n    ||   fv.getFlagStringValue(this.flags, 'type')\n}\n\nRewriteRule.prototype.getB = function () {\n  return fv.getFlagStringValue(this.flags, 'B')\n    ||   fv.hasFlag(this.flags, 'B')\n}\n\nRewriteRule.prototype.getBNE = function () {\n  return fv.getFlagStringValue(this.flags, 'BNE')\n}\n\nRewriteRule.prototype.isBCTLS = function () {\n  return fv.hasFlag(this.flags, 'BCTLS')\n}\n\nRewriteRule.prototype.isBNP = function () {\n  return fv.hasFlag(this.flags, 'BNP')\n    ||   fv.hasFlag(this.flags, 'backrefnoplus')\n}\n\nRewriteRule.prototype.isNC = function () {\n  return fv.hasFlag(this.flags, 'NC')\n    ||   fv.hasFlag(this.flags, 'nocase')\n}\n\nRewriteRule.prototype.isQSA = function () {\n  return fv.hasFlag(this.flags, 'QSA')\n    ||   fv.hasFlag(this.flags, 'qsappend')\n}\n\nRewriteRule.prototype.isQSD = function () {\n  return fv.hasFlag(this.flags, 'QSD')\n    ||   fv.hasFlag(this.flags, 'qsdiscard')\n}\n\nRewriteRule.prototype.isQSL = function () {\n  return fv.hasFlag(this.flags, 'QSL')\n    ||   fv.hasFlag(this.flags, 'qslast')\n}\n\nRewriteRule.prototype.isPassThrough = function () {\n  return fv.hasFlag(this.flags, 'PT')\n    ||   fv.hasFlag(this.flags, 'passthrough')\n}\n\nRewriteRule.prototype.isLast = function () {\n  return fv.hasFlag(this.flags, 'L')\n    ||   fv.hasFlag(this.flags, 'last')\n    ||   fv.hasFlag(this.flags, 'END')\n}\n\nRewriteRule.prototype.get_backref_format_flags = function () {\n  return {\n    \"B\":     this.getB(),\n    \"BNE\":   this.getBNE(),\n    \"BCTLS\": this.isBCTLS(),\n    \"BNP\":   this.isBNP()\n  }\n}\n\nmodule.exports = RewriteRule\n","const RewriteRule    = require('./model/RewriteRule')\nconst fh             = require('./util/file-helper')\nconst uh             = require('./util/url-helper')\nconst htaccessParser = require('../htaccess-parser/parser')\n\nfunction HtaccessTester(test_data) {\n  this.test_data = test_data\n\n  return this.runTest()\n}\n\nHtaccessTester.prototype.runTest = function () {\n  this.test_results = {}\n\n  try {\n    this.parseContent()\n\n    fh.setRewriteBase(\n      this.htaccessFile.RewriteBase\n    )\n\n    this.rules = []\n    for (let i=0; i < this.htaccessFile.RewriteRules.length; i++) {\n      const rule = new RewriteRule(\n        this.htaccessFile.RewriteRules[i]\n      )\n \n     this.rules.push(rule)\n    }\n\n    const {result, log} = this.processAllRules(\n      this.test_data.url,\n      this.test_data.variables\n    )\n\n    this.test_results.success = true\n    this.test_results.result  = result\n    this.test_results.log     = log\n  }\n  catch(e) {\n    this.test_results.success = false\n    this.test_results.error   = e.message\n  }\n\n  return this.test_results\n}\n\nHtaccessTester.prototype.parseContent = function () {\n  let htaccessContent = this.test_data.htaccess\n\n  this.htaccessFile = htaccessParser(htaccessContent)\n}\n\nHtaccessTester.prototype.processAllRules = function (url, variables) {\n  uh.parse_url(url)\n\n  const allLogs   = []\n  let finalResult = null\n  let skip_count  = 0\n\n  for (let i=0; i < this.rules.length; i++) {\n    const rule     = this.rules[i]\n    const someLogs = rule.runAllTests(url, variables)\n\n    if (!someLogs || !someLogs.length) continue\n    allLogs.push(someLogs)\n\n    const log = someLogs[someLogs.length - 1]\n\n    if (skip_count > 0) {\n      log.is_skipped = true\n      skip_count--\n      continue\n    }\n\n    if (!log.is_valid || !log.is_match) continue\n\n    if (log.result)\n      finalResult = log.result\n\n    if (log.result && log.result.skip_count)\n      skip_count += log.result.skip_count\n\n    if (log.result && log.result.url) {\n      log.result.file_path = fh.get_resolved_filepath(log.result.url)\n      log.result.url       = uh.get_resolved_url(log.result.url)\n      url = log.result.url\n\n      if (log.is_passthrough) {\n        const data = this.processAllRules(url, variables)\n\n        log['passthrough'] = data.log\n        finalResult = data.result || finalResult\n        break\n      }\n    }\n\n    if (log.result && log.result.status_code && !log.is_redirect) break\n\n    if (log.is_last) break\n  }\n\n  return {\n    \"result\": finalResult,\n    \"log\":    Array.prototype.concat.apply([], allLogs)\n  }\n}\n\nmodule.exports = function (test_data) {\n  return (new HtaccessTester(test_data))\n}\n","let RewriteBase = '/'\n\nconst setRewriteBase = function(rb) {\n  RewriteBase = rb || '/'\n}\n\nconst get_resolved_filepath = function(relative_path) {\n  if (!relative_path)\n    relative_path = ''\n  if (relative_path.substring(0,4).toLowerCase() === 'http')\n    return null\n\n  return (RewriteBase && (relative_path.indexOf(RewriteBase) !== 0))\n    ? (RewriteBase + '/' + relative_path).replace(/[\\/]{2,}/g, '/')\n    : relative_path\n}\n\nmodule.exports = {\n  setRewriteBase,\n  get_resolved_filepath\n}\n","const isValid = function (flags, supportedFlags, errorCallback) {\n  if (!Array.isArray(supportedFlags) || !supportedFlags.length || (typeof errorCallback !== 'function')) return\n\n  for (let i=0; i < flags.length; i++) {\n    const flag = flags[i]\n    let isSupported = false\n\n    for (let j=0; j < supportedFlags.length; j++) {\n      const supportedFlag = supportedFlags[j]\n\n      if (supportedFlag instanceof RegExp) {\n        if (supportedFlag.exec(flag)) {\n          isSupported = true\n          break\n        }\n      }\n      else if (supportedFlag === flag) {\n        isSupported = true\n        break\n      }\n    }\n\n    if (!isSupported) {\n      errorCallback(flag)\n    }\n  }\n}\n\nconst getFlagIntegerValue = function(flags, flag, defaultValue) {\n  let value = getFlagStringValue(flags, flag)\n\n  return value\n    ? parseInt(value, 10)\n    : (defaultValue && hasFlag(flags, flag))\n        ? defaultValue\n        : 0\n}\n\nconst getFlagStringValue = function(flags, flag) {\n  for (let i=0; i < flags.length; i++) {\n    if (flags[i].indexOf(flag + '=') === 0) {\n      return flags[i].substring((flag.length + 1))\n    }\n  }\n\n  return ''\n}\n\nconst hasFlag = function(flags, flag) {\n  return (flags.indexOf(flag) !== -1)\n}\n\nmodule.exports = {\n  isValid,\n  getFlagIntegerValue,\n  getFlagStringValue,\n  hasFlag\n}\n","const url_parse   = require('url').parse\nconst url_resolve = require('url').resolve\n\n// -----------------------------------------------------------------------------\n\nconst update_querystring = function(old_url, new_url, QSL, QSD, QSA) {\n  const old_query = parse_querystring(old_url, QSL)\n  const new_query = parse_querystring(new_url, QSL)\n\n  if (!old_query)\n    return new_url\n\n  if (!new_query) {\n    return QSD\n      ? new_url\n      : (new_url + '?' + old_query)\n  }\n  else {\n    return QSA\n      ? (new_url + '&' + old_query)\n      : new_url\n  }\n}\n\nconst parse_querystring = function(url, QSL) {\n  const index = QSL\n    ? url.lastIndexOf('?')\n    : url.indexOf('?')\n\n  const query = ((index >= 0) && (index < (url.length - 1)))\n    ? url.substring(index + 1)\n    : ''\n\n  return query\n}\n\n// -----------------------------------------------------------------------------\n\nlet parsed_url  = null\n\nconst parse_url = function(url) {\n  if (url && (!parsed_url || (parsed_url.href !== url))) {\n    const parts = url_parse(url)\n    if (!parts || !parts.protocol || !parts.hostname) return\n\n    parsed_url = parts\n  }\n}\n\nconst get_parsed_url = function() {\n  return parsed_url\n}\n\nconst get_parsed_pathname = function(should_trim_lead_slash, should_unescape) {\n  if (!parsed_url || !parsed_url.pathname) return ''\n\n  let pathname = parsed_url.pathname\n\n  if (should_trim_lead_slash)\n    pathname = trim_lead_slash(pathname)\n\n  if (should_unescape)\n    pathname = decodeURI(pathname)\n\n  return pathname\n}\n\nconst trim_lead_slash = function(pathname) {\n  return (pathname && (pathname[0] === '/'))\n    ? pathname.substring(1)\n    : pathname\n}\n\nconst get_resolved_url = function(relative_path) {\n  if (!relative_path)\n    relative_path = ''\n  if ((relative_path.substring(0,4).toLowerCase() !== 'http') && (!relative_path || (relative_path[0] !== '/')))\n    relative_path = '/' + relative_path\n\n  return parsed_url\n    ? url_resolve(parsed_url.href, relative_path)\n    : to\n}\n\nconst is_redirect_url = function(new_url) {\n  if (!parsed_url) return false\n\n  const parts = url_parse(new_url)\n  if (!parts || !parts.protocol || !parts.hostname) return false\n\n  return (parts.protocol !== parsed_url.protocol) || (parts.host !== parsed_url.host)\n}\n\n// -----------------------------------------------------------------------------\n\nconst format_backref_value = function(backref_value, flags) {\n  if (!backref_value || !flags)\n    return backref_value\n\n  if (!flags.B && !flags.BCTLS)\n    return backref_value\n\n  let whitelist = ''\n  let blacklist = flags.BNE || ''\n\n  if (flags.B) {\n    if (typeof flags.B === 'string') {\n      // user defined\n      whitelist = flags.B\n    } else {\n      // all characters outside ASCII ranges: 48-57, 65-90, 97-122\n      whitelist = '^0-9A-Za-z'\n    }\n  }\n  else {\n    // flags.BCTLS\n    // all characters inside ASCII range: 0-32,127\n    whitelist = '\\\\x00-\\\\x20\\\\x7f'\n  }\n\n  return escape_backref_value(backref_value, whitelist, blacklist, flags.BNP)\n}\n\nconst escape_backref_value = function(backref_value, whitelist, blacklist, BNP) {\n  const wl_regex = new RegExp(`[${whitelist}]`, 'g')\n  const bl_regex = new RegExp(`[${blacklist}]`)\n\n  return backref_value.replace(wl_regex, function(c) {\n    if (bl_regex.test(c))\n      return c\n\n    if ((c === ' ') && !BNP)\n      return '+'\n\n    return `%${c.charCodeAt(0).toString(16).toUpperCase()}`\n  })\n}\n\n// -----------------------------------------------------------------------------\n\nmodule.exports = {\n  update_querystring,\n  parse_querystring,\n  parse_url,\n  get_parsed_url,\n  get_parsed_pathname,\n  trim_lead_slash,\n  get_resolved_url,\n  is_redirect_url,\n  format_backref_value\n}\n","const url_parse = require('url').parse\nconst uh        = require('./url-helper')\n\nconst regexs = {\n  \"backref-rule-variable\":     /\\$([0-9])/g,\n  \"backref-cond-variable\":     /%([0-9])/g,\n\n  \"server-variable\":           /%{(API_VERSION|AUTH_TYPE|CONN_REMOTE_ADDR|CONN_REMOTE_ADDR|CONTEXT_DOCUMENT_ROOT|CONTEXT_PREFIX|DOCUMENT_ROOT|HTTPS|HTTP_ACCEPT|HTTP_COOKIE|HTTP_FORWARDED|HTTP_HOST|HTTP_PROXY_CONNECTION|HTTP_REFERER|HTTP_USER_AGENT|IPV6|IS_SUBREQ|PATH_INFO|QUERY_STRING|REMOTE_ADDR|REMOTE_ADDR|REMOTE_HOST|REMOTE_IDENT|REMOTE_PORT|REMOTE_USER|REQUEST_FILENAME|REQUEST_METHOD|REQUEST_SCHEME|REQUEST_URI|SCRIPT_FILENAME|SCRIPT_GROUP|SCRIPT_USER|SERVER_ADDR|SERVER_ADMIN|SERVER_NAME|SERVER_PORT|SERVER_PROTOCOL|SERVER_SOFTWARE|THE_REQUEST|TIME|TIME_DAY|TIME_HOUR|TIME_MIN|TIME_MON|TIME_SEC|TIME_WDAY|TIME_YEAR)}/g,\n  \"environment-variable\":      /%{ENV:([^}]+)}/g,\n  \"ssl-environment-variable\":  /%{SSL:(API_VERSION|AUTH_TYPE|DOCUMENT_ROOT|HTTPS|HTTP_ACCEPT|HTTP_COOKIE|HTTP_FORWARDED|HTTP_HOST|HTTP_PROXY_CONNECTION|HTTP_REFERER|HTTP_USER_AGENT|IS_SUBREQ|PATH_INFO|QUERY_STRING|REMOTE_ADDR|REMOTE_HOST|REMOTE_IDENT|REMOTE_USER|REQUEST_FILENAME|REQUEST_METHOD|REQUEST_SCHEME|REQUEST_URI|SERVER_ADMIN|SERVER_NAME|SERVER_PORT|SERVER_PROTOCOL|SERVER_SOFTWARE|SSL_CIPHER|SSL_CIPHER_ALGKEYSIZE|SSL_CIPHER_EXPORT|SSL_CIPHER_USEKEYSIZE|SSL_CLIENT_A_KEY|SSL_CLIENT_A_SIG|SSL_CLIENT_CERT|SSL_CLIENT_CERT_CHAIN_n|SSL_CLIENT_CERT_RFC4523_CEA|SSL_CLIENT_I_DN|SSL_CLIENT_I_DN_x509|SSL_CLIENT_M_SERIAL|SSL_CLIENT_M_VERSION|SSL_CLIENT_SAN_DNS_n|SSL_CLIENT_SAN_Email_n|SSL_CLIENT_SAN_OTHER_msUPN_n|SSL_CLIENT_S_DN|SSL_CLIENT_S_DN_x509|SSL_CLIENT_VERIFY|SSL_CLIENT_V_END|SSL_CLIENT_V_REMAIN|SSL_CLIENT_V_START|SSL_COMPRESS_METHOD|SSL_PROTOCOL|SSL_SECURE_RENEG|SSL_SERVER_A_KEY|SSL_SERVER_A_SIG|SSL_SERVER_CERT|SSL_SERVER_I_DN|SSL_SERVER_I_DN_x509|SSL_SERVER_M_SERIAL|SSL_SERVER_M_VERSION|SSL_SERVER_SAN_DNS_n|SSL_SERVER_SAN_Email_n|SSL_SERVER_SAN_OTHER_dnsSRV_n|SSL_SERVER_S_DN|SSL_SERVER_S_DN_x509|SSL_SERVER_V_END|SSL_SERVER_V_START|SSL_SESSION_ID|SSL_SESSION_RESUMED|SSL_SRP_USER|SSL_SRP_USERINFO|SSL_TLS_SNI|SSL_VERSION_INTERFACE|SSL_VERSION_LIBRARY|THE_REQUEST|TIME|TIME_DAY|TIME_HOUR|TIME_MIN|TIME_MON|TIME_SEC|TIME_WDAY|TIME_YEAR)}/g,\n  \"http-header-variable\":      /%{HTTP:([^}]+)}/g,\n\n  \"generic-variable\":          /%{[^}]*}/g\n}\n\nconst get_regex = function(key) {\n  const regex = regexs[key]\n\n  if (regex.global)\n    regex.lastIndex = 0\n\n  return regex\n}\n\nconst get_supportedVariables = function() {\n  return [\n    get_regex('server-variable'),\n    get_regex('environment-variable'),\n    get_regex('ssl-environment-variable'),\n    get_regex('http-header-variable')\n  ]\n}\n\nconst isValid = function (testString, errorCallback) {\n  if (!testString || (typeof errorCallback !== 'function')) return\n\n  const all_variables = []\n  let regex, matches\n\n  regex = get_regex('generic-variable')\n  while (matches = regex.exec(testString)) {\n    all_variables.push(matches[0])\n  }\n\n  if (all_variables.length) {\n    const supportedVariables = get_supportedVariables()\n\n    for (let i=0; i < all_variables.length; i++) {\n      const variable = all_variables[i]\n      let isSupported = false\n\n      for (let j=0; j < supportedVariables.length; j++) {\n        regex = supportedVariables[j]\n\n        if (regex.test(variable)) {\n          isSupported = true\n          break\n        }\n      }\n\n      if (!isSupported) {\n        errorCallback(variable)\n      }\n    }\n  }\n}\n\nconst resolveVariables = function(testString, errorCallback, url, variables, currentRuleMatches, previousCondMatches, flags) {\n  if (!testString || (typeof errorCallback !== 'function')) return\n\n  if (!variables)\n    variables = {}\n\n  addUrlDerivedVariables(url, variables)\n\n  const variableKeys = ['backref-rule', 'backref-cond', 'server', 'environment', 'ssl-environment', 'http-header']\n  let resolvedTestString = testString\n  let variableKey, regex, matches, variableExpression, unresolvedVariable, resolvedVariable\n\n  for (let i=0; i < variableKeys.length; i++) {\n    variableKey = variableKeys[i]\n    regex       = get_regex(variableKey + '-variable')\n\n    while (matches = regex.exec(testString)) {\n      variableExpression = matches[0]\n      unresolvedVariable = matches[1]\n\n      try {\n        switch(variableKey) {\n          case 'backref-rule': {\n              const backref_index = parseInt(unresolvedVariable, 10)\n              resolvedVariable    = currentRuleMatches[backref_index]\n              resolvedVariable    = uh.format_backref_value(resolvedVariable, flags)\n            }\n            break\n          case 'backref-cond': {\n              const backref_index = parseInt(unresolvedVariable, 10)\n              resolvedVariable    = previousCondMatches[backref_index]\n              resolvedVariable    = uh.format_backref_value(resolvedVariable, flags)\n            }\n            break\n          default:\n            resolvedVariable = variables[variableKey][unresolvedVariable]\n            break\n        }\n\n        if (resolvedVariable === undefined) throw ''\n\n        resolvedTestString = resolvedTestString.replaceAll(variableExpression, resolvedVariable)\n      }\n      catch(e) {\n        errorCallback(variableExpression)\n      }\n    }\n  }\n\n  return resolvedTestString\n}\n\nconst addUrlDerivedVariables = function(url, variables) {\n  if (!url) return\n\n  if (!variables['server'])\n    variables['server'] = {}\n\n  if (!variables['ssl-environment'])\n    variables['ssl-environment'] = {}\n\n  const parts = url_parse(url)\n\n  variables['server']['REQUEST_URI']  = parts.pathname\n  variables['server']['QUERY_STRING'] = parts.query\n  variables['server']['THE_REQUEST']  = url\n\n  variables['ssl-environment']['REQUEST_URI']  = parts.pathname\n  variables['ssl-environment']['QUERY_STRING'] = parts.query\n  variables['ssl-environment']['THE_REQUEST']  = url\n}\n\nmodule.exports = {\n  isValid,\n  resolveVariables\n}\n","const htaccess_tester = require('./htaccess-tester/tester')\n\nmodule.exports = htaccess_tester\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","window.htaccess_tester = require('../..')\r\n"],"names":["regexs","url","RegExp","host","_searchParams","WeakMap","URL","base","_classCallCheck","_classPrivateFieldInitSpec","writable","value","resolve","this","href","_createClass","key","concat","protocol","username","password","pathname","search","hash","toString","get","set","matches","exec","Error","hostname","port","_classPrivateFieldGet","_classPrivateFieldSet","URLSearchParams","parseQueryString","arguments","length","undefined","slashes","auth","path","query","searchParams","parse","srcURL","dstURL","fields","i","field","replace","_map","_sorted","_this","substring","split","forEach","pair","index","indexOf","val","push","_toConsumableArray","splice","keys","Object","sort","values","apply","_this2","denormalized","callback","thisArg","_this3","entries","_ref","_ref2","_slicedToArray","exclude_question_mark","_ref3","_ref4","map_clone","module","exports","e","window","jsURL","RewriteRules","text","testString","condPattern","flags","map","Function","prototype","call","String","trim","filter","flag","pattern","substitution","conditions","HtaccessFile","require","RewriteRule","RewriteCond","Parser","content","Array","isArray","line","trimmed","parseContent","htaccessFile","RewriteEngineActivated","parts","part","toLowerCase","RewriteBase","stripQuotes","rule","s","test","slice","vi","fv","supportedFlags","baseCondition","assign","condPatternFlags","re","isNC","runTest","variables","currentRuleMatches","previousCondMatches","log","errors","isValid","is_valid","is_match","resolvedTestString","resolveVariables","variable","result","testVal","condVal","parseInt","isValidTestString","isValidFlags","hasFlag","isOR","fh","uh","baseRule","runAllTests","get_parsed_pathname","logs","doAllConditionsMatch","allConditionsMatch","resolvedSubstitutionString","get_backref_format_flags","new_url","update_querystring","isQSL","isQSD","isQSA","all_conditions_match","getStatusCode","getRedirectStatusCode","getMimeType","getSkipCount","is_redirect","status_code","is_redirect_url","is_passthrough","isPassThrough","is_last","isLast","nextCount","getNextCount","runNext","trim_lead_slash","get_resolved_url","OK","count","iterations","get_resolved_filepath","isValidSubstitutionString","state","currentIsOr","prevWasOr","orConditionMet","getFlagIntegerValue","getFlagStringValue","getB","getBNE","isBCTLS","isBNP","htaccessParser","HtaccessTester","test_data","test_results","setRewriteBase","rules","_this$processAllRules","processAllRules","success","error","message","htaccessContent","htaccess","parse_url","allLogs","finalResult","skip_count","someLogs","is_skipped","file_path","data","rb","relative_path","errorCallback","isSupported","j","supportedFlag","defaultValue","url_parse","url_resolve","parse_querystring","QSL","lastIndexOf","parsed_url","escape_backref_value","backref_value","whitelist","blacklist","BNP","wl_regex","bl_regex","c","charCodeAt","toUpperCase","old_url","QSD","QSA","old_query","new_query","get_parsed_url","should_trim_lead_slash","should_unescape","decodeURI","to","format_backref_value","B","BCTLS","BNE","get_regex","regex","global","lastIndex","addUrlDerivedVariables","all_variables","supportedVariables","variableKey","variableExpression","unresolvedVariable","resolvedVariable","variableKeys","replaceAll","htaccess_tester","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","id","loaded","__webpack_modules__","nmd","paths","children"],"sourceRoot":""}